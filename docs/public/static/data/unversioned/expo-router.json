{"name":"expo-router","variant":"project","kind":1,"children":[{"name":"Slot","variant":"reference","kind":4194304,"target":121},{"name":"ExpoRouter","variant":"declaration","kind":4,"comment":{"summary":[{"kind":"text","text":"The main routing type for Expo Router."}],"modifierTags":["@internal"]},"children":[{"name":"__routes","variant":"declaration","kind":256,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record","package":"typescript"}]}]},{"name":"SplashScreen","variant":"declaration","kind":4,"children":[{"name":"hideAsync","variant":"declaration","kind":64,"signatures":[{"name":"hideAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hides the native splash screen immediately. Be careful to ensure that your app has content ready\nto display when you hide the splash screen, or you may see a blank screen briefly. See the\n[\"Usage\"](#usage) section for an example."}]},"type":{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript"}}]},{"name":"preventAutoHideAsync","variant":"declaration","kind":64,"signatures":[{"name":"preventAutoHideAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Makes the native splash screen (configured in "},{"kind":"code","text":"`app.json`"},{"kind":"text","text":") remain visible until "},{"kind":"code","text":"`hideAsync`"},{"kind":"text","text":" is called.\n\n> **Important note**: It is recommended to call this in global scope without awaiting, rather than\n> inside React components or hooks, because otherwise this might be called too late,\n> when the splash screen is already hidden."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nimport * as SplashScreen from 'expo-splash-screen';\n\nSplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n // ...\n}\n```"}]}]},"type":{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript"}}]}]},{"name":"LinkProps","variant":"declaration","kind":256,"children":[{"name":"asChild","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Forward props to child component. Useful for custom buttons."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"className","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"On web, this sets the HTML "},{"kind":"code","text":"`class`"},{"kind":"text","text":" directly. On native, this can be used with CSS interop tools like Nativewind."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"download","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"**Web only:** Specifies that the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" should be downloaded when the user clicks on the link,\ninstead of navigating to it. It is typically used for links that point to files that the user should download,\nsuch as PDFs, images, documents, etc.\n\nThe value of the "},{"kind":"code","text":"`download`"},{"kind":"text","text":" property, which represents the filename for the downloaded file.\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"text","text":"<Link href=\"/image.jpg\" download=\"my-image.jpg\">Download image</Link>"}]}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","target":-1,"name":"WebAnchorProps.download"}},{"name":"href","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Path to route to."}]},"type":{"type":"reference","target":215,"typeArguments":[{"type":"reference","target":97,"name":"T","package":"expo-router","qualifiedName":"LinkProps.T","refersToTypeParameter":true}],"name":"Href","package":"expo-router"}},{"name":"onPress","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"e","variant":"param","kind":32768,"type":{"type":"union","types":[{"type":"reference","target":{"sourceFileName":"../../node_modules/react-native/Libraries/Types/CoreEventTypes.d.ts","qualifiedName":"GestureResponderEvent"},"name":"GestureResponderEvent","package":"react-native"},{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.MouseEvent"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.dom.d.ts","qualifiedName":"HTMLAnchorElement"},"name":"HTMLAnchorElement","package":"typescript"},{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.dom.d.ts","qualifiedName":"MouseEvent"},"name":"MouseEvent","package":"typescript"}],"name":"MouseEvent","package":"@types/react","qualifiedName":"React.MouseEvent"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},"overwrites":{"type":"reference","target":-1,"name":"Omit.onPress"}},{"name":"push","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Should push the current route"}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"rel","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"**Web only:** Specifies the relationship between the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" and the current route.\n\nCommon values:\n- **nofollow**: Indicates to search engines that they should not follow the "},{"kind":"code","text":"`href`"},{"kind":"text","text":". This is often used for user-generated content or links that should not influence search engine rankings.\n- **noopener**: Suggests that the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" should not have access to the opening window's "},{"kind":"code","text":"`window.opener`"},{"kind":"text","text":" object, which is a security measure to prevent potentially harmful behavior in cases of links that open new tabs or windows.\n- **noreferrer**: Requests that the browser not send the "},{"kind":"code","text":"`Referer`"},{"kind":"text","text":" HTTP header when navigating to the "},{"kind":"code","text":"`href`"},{"kind":"text","text":". This can enhance user privacy.\n\nThe "},{"kind":"code","text":"`rel`"},{"kind":"text","text":" property is primarily used for informational and instructive purposes, helping browsers and web\ncrawlers make better decisions about how to handle and interpret the links on a web page. It is important\nto use appropriate "},{"kind":"code","text":"`rel`"},{"kind":"text","text":" values to ensure that links behave as intended and adhere to best practices for web\ndevelopment and SEO (Search Engine Optimization).\n\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"text","text":"<Link href=\"https://expo.dev\" rel=\"nofollow\">Go to Expo</Link>"}]}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","target":-1,"name":"WebAnchorProps.rel"}},{"name":"relativeToDirectory","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Relative URL references are either relative to the directory or the document. By default, relative paths are relative to the document."}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"[Resolving relative references in Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references)"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"replace","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Should replace the current route without adding to the history."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"target","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"**Web only:** Specifies where to open the "},{"kind":"code","text":"`href`"},{"kind":"text","text":".\n\n- **_self**: the current tab.\n- **_blank**: opens in a new tab or window.\n- **_parent**: opens in the parent browsing context. If no parent, defaults to **_self**.\n- **_top**: opens in the highest browsing context ancestor. If no ancestors, defaults to **_self**.\n\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'_self'"}]},{"tag":"@example","content":[{"kind":"text","text":"<Link href=\"https://expo.dev\" target=\"_blank\">Go to Expo in new tab</Link>"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"_self"},{"type":"literal","value":"_blank"},{"type":"literal","value":"_parent"},{"type":"literal","value":"_top"}]},"inheritedFrom":{"type":"reference","target":-1,"name":"WebAnchorProps.target"}}],"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}}],"extendedTypes":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Omit"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../node_modules/react-native/Libraries/Text/Text.d.ts","qualifiedName":"TextProps"},"name":"TextProps","package":"react-native"},{"type":"literal","value":"href"}],"name":"Omit","package":"typescript"},{"type":"reference","target":{"sourceFileName":"src/link/Link.tsx","qualifiedName":"WebAnchorProps"},"name":"WebAnchorProps","package":"expo-router"}]},{"name":"RequireContext","variant":"declaration","kind":256,"children":[{"name":"id","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"**Unimplemented:** Readable identifier for the context module."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"keys","variant":"declaration","kind":2048,"signatures":[{"name":"keys","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Return the keys that can be resolved."}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"name":"resolve","variant":"declaration","kind":2048,"signatures":[{"name":"resolve","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"**Unimplemented:** Return the module identifier for a user request."}]},"parameters":[{"name":"id","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}]}],"signatures":[{"name":"RequireContext","variant":"signature","kind":4096,"parameters":[{"name":"id","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"any"}},{"name":"RequireContext","variant":"signature","kind":4096,"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"id","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","target":187,"name":"T","package":"expo-router","refersToTypeParameter":true}}]},{"name":"DynamicRouteTemplate","variant":"declaration","kind":2097152,"type":{"type":"conditional","checkType":{"type":"reference","target":212,"name":"ExpoRouter.__routes","package":"expo-router"},"extendsType":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"DynamicRouteTemplate","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}},"trueType":{"type":"indexedAccess","indexType":{"type":"literal","value":"DynamicRouteTemplate"},"objectType":{"type":"reference","target":212,"name":"ExpoRouter.__routes","package":"expo-router"}},"falseType":{"type":"intrinsic","name":"string"}}},{"name":"DynamicRoutes","variant":"declaration","kind":2097152,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"conditional","checkType":{"type":"reference","target":212,"typeArguments":[{"type":"reference","target":207,"name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"ExpoRouter.__routes","package":"expo-router"},"extendsType":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"DynamicRoutes","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}}]}},"trueType":{"type":"conditional","checkType":{"type":"reference","target":207,"name":"T","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"indexedAccess","indexType":{"type":"literal","value":"DynamicRoutes"},"objectType":{"type":"reference","target":212,"typeArguments":[{"type":"inferred","name":"_"}],"name":"ExpoRouter.__routes","package":"expo-router"}},"trueType":{"type":"reference","target":207,"name":"T","package":"expo-router","refersToTypeParameter":true},"falseType":{"type":"intrinsic","name":"never"}},"falseType":{"type":"intrinsic","name":"string"}}},{"name":"DynamicTemplateToHrefString","variant":"declaration","kind":2097152,"typeParameters":[{"name":"Path","variant":"typeParam","kind":131072}],"type":{"type":"conditional","checkType":{"type":"reference","target":220,"name":"Path","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"","tail":[[{"type":"inferred","name":"PartA"},"/"],[{"type":"inferred","name":"PartB"},""]]},"trueType":{"type":"templateLiteral","head":"","tail":[[{"type":"conditional","checkType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"PartA"},"name":"PartA","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"[","tail":[[{"type":"intrinsic","name":"string"},"]"]]},"trueType":{"type":"intrinsic","name":"string"},"falseType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"PartA"},"name":"PartA","package":"expo-router","refersToTypeParameter":true}},"/"],[{"type":"reference","target":219,"typeArguments":[{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"PartB"},"name":"PartB","package":"expo-router","refersToTypeParameter":true}],"name":"DynamicTemplateToHrefString","package":"expo-router"},""]]},"falseType":{"type":"conditional","checkType":{"type":"reference","target":220,"name":"Path","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"[","tail":[[{"type":"intrinsic","name":"string"},"]"]]},"trueType":{"type":"intrinsic","name":"string"},"falseType":{"type":"reference","target":220,"name":"Path","package":"expo-router","refersToTypeParameter":true}}}},{"name":"ErrorBoundaryProps","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Props passed to a page's "},{"kind":"code","text":"`ErrorBoundary`"},{"kind":"text","text":" export."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"error","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The error that was thrown."}]},"type":{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Error"},"name":"Error","package":"typescript"}},{"name":"retry","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Retry rendering the component by clearing the "},{"kind":"code","text":"`error`"},{"kind":"text","text":" state."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}}]}}},{"name":"Href","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"The main routing type for Expo Router. Includes all available routes with strongly typed parameters.\n\nA Href can either be a string or an object.\n\nHref accepts an optional T parameter to correctly type dynamic routes string. For example: Without the generic the route "},{"kind":"code","text":"`/folder/[slug]`"},{"kind":"text","text":" will be typed as "},{"kind":"code","text":"`/folder/${string}`"},{"kind":"text","text":", which is incorrect as "},{"kind":"code","text":"`/folder/apple/orange`"},{"kind":"text","text":" would be valid. But by passing desired route as a generic "},{"kind":"code","text":"`Href<'/folder/apple'>`"},{"kind":"text","text":", it will validate against this edge case."}]},"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]},"default":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"__branded__","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}}]}}}],"type":{"type":"union","types":[{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"StaticRouteToHrefString"},"typeArguments":[{"type":"union","types":[{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"AllUngroupedRoutes"},"typeArguments":[{"type":"reference","target":201,"name":"StaticRoutes","package":"expo-router"}],"name":"AllUngroupedRoutes","package":"expo-router"},{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"RelativePathString"},"name":"RelativePathString","package":"expo-router"},{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"ExternalPathString"},"name":"ExternalPathString","package":"expo-router"}]}],"name":"StaticRouteToHrefString","package":"expo-router"},{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"StaticRouteToHrefObject"},"typeArguments":[{"type":"union","types":[{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"AllUngroupedRoutes"},"typeArguments":[{"type":"reference","target":201,"name":"StaticRoutes","package":"expo-router"}],"name":"AllUngroupedRoutes","package":"expo-router"},{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"RelativePathString"},"name":"RelativePathString","package":"expo-router"},{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"ExternalPathString"},"name":"ExternalPathString","package":"expo-router"}]}],"name":"StaticRouteToHrefObject","package":"expo-router"},{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"DynamicRouteString"},"typeArguments":[{"type":"reference","target":216,"name":"T","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":208,"name":"DynamicRouteTemplate","package":"expo-router"}],"name":"DynamicRouteString","package":"expo-router"},{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"DynamicTemplateToHrefObject"},"typeArguments":[{"type":"reference","target":208,"name":"DynamicRouteTemplate","package":"expo-router"}],"name":"DynamicTemplateToHrefObject","package":"expo-router"}]}},{"name":"NativeIntent","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"redirectSystemPath","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"initial","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"path","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}}],"type":{"type":"union","types":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","package":"typescript"},{"type":"intrinsic","name":"string"}]}}]}}}]}}},{"name":"PickPartial","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"The list of input keys will become optional, everything else will remain the same."}]},"typeParameters":[{"name":"T","variant":"typeParam","kind":131072},{"name":"K","variant":"typeParam","kind":131072,"type":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","target":190,"name":"T","package":"expo-router","refersToTypeParameter":true}}}],"type":{"type":"intersection","types":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Omit"},"typeArguments":[{"type":"reference","target":190,"name":"T","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":191,"name":"K","package":"expo-router","refersToTypeParameter":true}],"name":"Omit","package":"typescript"},{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Partial"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Pick"},"typeArguments":[{"type":"reference","target":190,"name":"T","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":191,"name":"K","package":"expo-router","refersToTypeParameter":true}],"name":"Pick","package":"typescript"}],"name":"Partial","package":"typescript"}]}},{"name":"RouteParamInput","variant":"declaration","kind":2097152,"typeParameters":[{"name":"Path","variant":"typeParam","kind":131072}],"type":{"type":"intersection","types":[{"type":"reference","target":224,"typeArguments":[{"type":"reference","target":229,"name":"Path","package":"expo-router","refersToTypeParameter":true}],"name":"StrictRouteParamsInputs","package":"expo-router"},{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"UnknownInputParams"},"name":"UnknownInputParams","package":"expo-router"}]}},{"name":"RouteParams","variant":"declaration","kind":2097152,"typeParameters":[{"name":"PathOrObject","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"reference","target":214,"name":"Routes","package":"expo-router"},{"type":"reference","target":221,"name":"UnknownOutputParams","package":"expo-router"}]}},{"name":"ExtraPathOrObject","variant":"typeParam","kind":131072,"type":{"type":"reference","target":221,"name":"UnknownOutputParams","package":"expo-router"},"default":{"type":"reference","target":221,"name":"UnknownOutputParams","package":"expo-router"}}],"type":{"type":"conditional","checkType":{"type":"reference","target":231,"name":"PathOrObject","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"intrinsic","name":"string"},"trueType":{"type":"intersection","types":[{"type":"reference","target":226,"typeArguments":[{"type":"reference","target":231,"name":"PathOrObject","package":"expo-router","refersToTypeParameter":true}],"name":"StrictRouteParamsOutput","package":"expo-router"},{"type":"reference","target":232,"name":"ExtraPathOrObject","package":"expo-router","refersToTypeParameter":true}]},"falseType":{"type":"reference","target":231,"name":"PathOrObject","package":"expo-router","refersToTypeParameter":true}}},{"name":"RouteSegments","variant":"declaration","kind":2097152,"typeParameters":[{"name":"PathOrStringArray","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"type":{"type":"conditional","checkType":{"type":"reference","target":236,"name":"PathOrStringArray","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"trueType":{"type":"reference","target":236,"name":"PathOrStringArray","package":"expo-router","refersToTypeParameter":true},"falseType":{"type":"conditional","checkType":{"type":"reference","target":236,"name":"PathOrStringArray","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"/","tail":[[{"type":"inferred","name":"PartA"},""]]},"trueType":{"type":"reference","target":235,"typeArguments":[{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"PartA"},"name":"PartA","package":"expo-router","refersToTypeParameter":true}],"name":"RouteSegments","package":"expo-router"},"falseType":{"type":"conditional","checkType":{"type":"reference","target":236,"name":"PathOrStringArray","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"","tail":[[{"type":"inferred","name":"PartA"},"/"],[{"type":"inferred","name":"PartB"},""]]},"trueType":{"type":"tuple","elements":[{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"PartA"},"name":"PartA","package":"expo-router","refersToTypeParameter":true},{"type":"rest","elementType":{"type":"reference","target":235,"typeArguments":[{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"PartB"},"name":"PartB","package":"expo-router","refersToTypeParameter":true}],"name":"RouteSegments","package":"expo-router"}}]},"falseType":{"type":"conditional","checkType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"HasTypedRoutes"},"name":"HasTypedRoutes","package":"expo-router"},"extendsType":{"type":"literal","value":true},"trueType":{"type":"tuple","elements":[{"type":"reference","target":236,"name":"PathOrStringArray","package":"expo-router","refersToTypeParameter":true}]},"falseType":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}}}}},{"name":"Router","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"back","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Go back in the history."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"canDismiss","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"If there's history that supports invoking the "},{"kind":"code","text":"`dismiss`"},{"kind":"text","text":" and "},{"kind":"code","text":"`dismissAll`"},{"kind":"text","text":" function."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"canGoBack","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"If there's history that supports invoking the "},{"kind":"code","text":"`back`"},{"kind":"text","text":" function."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"dismiss","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigate to a screen with a stack lower than the current screen. Using the provided count if possible, otherwise 1."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"count","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"dismissAll","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigate to first screen within the lowest stack."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"navigate","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigate to the provided href."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"typeParameter":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}}],"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","target":215,"typeArguments":[{"type":"reference","target":48,"name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"Href","package":"expo-router"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","target":{"sourceFileName":"src/global-state/routing.ts","qualifiedName":"NavigationOptions"},"name":"NavigationOptions","package":"expo-router"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"push","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigate to the provided href using a push operation if possible."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"typeParameter":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}}],"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","target":215,"typeArguments":[{"type":"reference","target":42,"name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"Href","package":"expo-router"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","target":{"sourceFileName":"src/global-state/routing.ts","qualifiedName":"NavigationOptions"},"name":"NavigationOptions","package":"expo-router"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"replace","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigate to route without appending to the history."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"typeParameter":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}}],"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","target":215,"typeArguments":[{"type":"reference","target":54,"name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"Href","package":"expo-router"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","target":{"sourceFileName":"src/global-state/routing.ts","qualifiedName":"NavigationOptions"},"name":"NavigationOptions","package":"expo-router"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"setParams","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Update the current route query params."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"typeParameter":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","target":214,"name":"Routes","package":"expo-router"}}],"parameters":[{"name":"params","variant":"param","kind":32768,"type":{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Partial"},"typeArguments":[{"type":"reference","target":228,"typeArguments":[{"type":"reference","target":69,"name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParamInput","package":"expo-router"}],"name":"Partial","package":"typescript"}}],"type":{"type":"intrinsic","name":"void"}}]}}}]}}},{"name":"Routes","variant":"declaration","kind":2097152,"type":{"type":"union","types":[{"type":"reference","target":208,"name":"DynamicRouteTemplate","package":"expo-router"},{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"AllUngroupedRoutes"},"typeArguments":[{"type":"reference","target":201,"name":"StaticRoutes","package":"expo-router"}],"name":"AllUngroupedRoutes","package":"expo-router"}]}},{"name":"SearchParams","variant":"declaration","kind":2097152,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Use RouteParams or StrictRouteParams instead"}]}]},"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"never"}}],"type":{"type":"reference","target":230,"typeArguments":[{"type":"reference","target":234,"name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router"}},{"name":"SingleRoutePart","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Return only the RoutePart of a string. If the string has multiple parts return never\n\nstring   | type\n---------|------\n123      | 123\n/123/abc | never\n123?abc  | never\n./123    | never\n/123     | never\n123/../  | never"}]},"typeParameters":[{"name":"S","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"conditional","checkType":{"type":"reference","target":223,"name":"S","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"","tail":[[{"type":"intrinsic","name":"string"},"/"],[{"type":"intrinsic","name":"string"},""]]},"trueType":{"type":"intrinsic","name":"never"},"falseType":{"type":"conditional","checkType":{"type":"reference","target":223,"name":"S","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"","tail":[[{"type":"intrinsic","name":"string"},""],[{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"SearchOrHash"},"name":"SearchOrHash","package":"expo-router"},""]]},"trueType":{"type":"intrinsic","name":"never"},"falseType":{"type":"conditional","checkType":{"type":"reference","target":223,"name":"S","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"literal","value":""},"trueType":{"type":"intrinsic","name":"never"},"falseType":{"type":"conditional","checkType":{"type":"reference","target":223,"name":"S","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"(","tail":[[{"type":"intrinsic","name":"string"},")"]]},"trueType":{"type":"intrinsic","name":"never"},"falseType":{"type":"conditional","checkType":{"type":"reference","target":223,"name":"S","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"[","tail":[[{"type":"intrinsic","name":"string"},"]"]]},"trueType":{"type":"intrinsic","name":"never"},"falseType":{"type":"reference","target":223,"name":"S","package":"expo-router","refersToTypeParameter":true}}}}}}},{"name":"StaticRoutes","variant":"declaration","kind":2097152,"type":{"type":"conditional","checkType":{"type":"reference","target":212,"name":"ExpoRouter.__routes","package":"expo-router"},"extendsType":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"StaticRoutes","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}},"trueType":{"type":"indexedAccess","indexType":{"type":"literal","value":"StaticRoutes"},"objectType":{"type":"reference","target":212,"name":"ExpoRouter.__routes","package":"expo-router"}},"falseType":{"type":"intrinsic","name":"string"}}},{"name":"StrictRouteParamsInputs","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Returns a Record of the routes parameters as strings and CatchAll parameters\n\nThere are two versions, input and output, as you can input 'string | number' but\n the output will always be 'string'\n\n/[id]/[...rest] -> { id: string, rest: string[] }\n/no-params      -> {}"}]},"typeParameters":[{"name":"Path","variant":"typeParam","kind":131072}],"type":{"type":"mapped","parameter":"Key","parameterType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"ParameterNames"},"typeArguments":[{"type":"reference","target":225,"name":"Path","package":"expo-router","refersToTypeParameter":true}],"name":"ParameterNames","package":"expo-router"},"templateType":{"type":"conditional","checkType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"Key"},"name":"Key","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"...","tail":[[{"type":"intrinsic","name":"string"},""]]},"trueType":{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},"falseType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},"nameType":{"type":"conditional","checkType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"Key"},"name":"Key","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"...","tail":[[{"type":"inferred","name":"Name"},""]]},"trueType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"Name"},"name":"Name","package":"expo-router","refersToTypeParameter":true},"falseType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"Key"},"name":"Key","package":"expo-router","refersToTypeParameter":true}}}},{"name":"StrictRouteParamsOutput","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Returns a Record of the routes parameters as strings and CatchAll parameters\n\nThere are two versions, input and output, as you can input 'string | number' but\n the output will always be 'string'\n\n/[id]/[...rest] -> { id: string, rest: string[] }\n/no-params      -> {}"}],"blockTags":[{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"StrictRouteParamsInputs","target":224,"tsLinkText":""},{"kind":"text","text":" for the input version"}]}]},"typeParameters":[{"name":"Path","variant":"typeParam","kind":131072}],"type":{"type":"mapped","parameter":"Key","parameterType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"ParameterNames"},"typeArguments":[{"type":"reference","target":227,"name":"Path","package":"expo-router","refersToTypeParameter":true}],"name":"ParameterNames","package":"expo-router"},"templateType":{"type":"conditional","checkType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"Key"},"name":"Key","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"...","tail":[[{"type":"intrinsic","name":"string"},""]]},"trueType":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"falseType":{"type":"intrinsic","name":"string"}},"nameType":{"type":"conditional","checkType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"Key"},"name":"Key","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"templateLiteral","head":"...","tail":[[{"type":"inferred","name":"Name"},""]]},"trueType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"Name"},"name":"Name","package":"expo-router","refersToTypeParameter":true},"falseType":{"type":"reference","target":{"sourceFileName":"src/typed-routes/types.ts","qualifiedName":"Key"},"name":"Key","package":"expo-router","refersToTypeParameter":true}}}},{"name":"UnknownOutputParams","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Routes can have unknown outputs (e.g query params)\nUnlike inputs, outputs can't be undefined or null"}]},"type":{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}],"name":"Record","package":"typescript"}},{"name":"router","variant":"declaration","kind":32,"flags":{"isConst":true},"type":{"type":"reference","target":29,"name":"Router","package":"expo-router"},"defaultValue":"..."},{"name":"ErrorBoundary","variant":"declaration","kind":64,"signatures":[{"name":"ErrorBoundary","variant":"signature","kind":4096,"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","target":155,"name":"ErrorBoundaryProps","package":"expo-router"}}],"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.JSX.Element"},"name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element"}}]},{"name":"ExpoRoot","variant":"declaration","kind":64,"signatures":[{"name":"ExpoRoot","variant":"signature","kind":4096,"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","target":{"sourceFileName":"src/ExpoRoot.tsx","qualifiedName":"ExpoRootProps"},"name":"ExpoRootProps","package":"expo-router"}}],"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.JSX.Element"},"name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element"}}]},{"name":"Link","variant":"declaration","kind":64,"children":[{"name":"resolveHref","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Helper method to resolve an Href object into a string."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","target":215,"name":"Href","package":"expo-router"}}],"type":{"type":"intrinsic","name":"string"}}]}}}],"signatures":[{"name":"Link","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Component to render link to another route using a path.\nUses an anchor tag on the web."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}}],"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.PropsWithChildren"},"typeArguments":[{"type":"reference","target":83,"typeArguments":[{"type":"reference","target":72,"name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"LinkProps","package":"expo-router"}],"name":"PropsWithChildren","package":"@types/react","qualifiedName":"React.PropsWithChildren"}}],"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"__global.JSX.Element"},"name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element"}}]},{"name":"Navigator","variant":"declaration","kind":64,"children":[{"name":"Screen","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Used to configure route settings."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"typeParameter":[{"name":"TOptions","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"object"},"default":{"type":"intrinsic","name":"object"}}],"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","target":{"sourceFileName":"src/views/Screen.tsx","qualifiedName":"ScreenProps"},"typeArguments":[{"type":"reference","target":147,"name":"TOptions","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}],"type":{"type":"literal","value":null}}]}}},{"name":"Slot","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Renders the currently selected content."}]},"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Omit"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"src/views/Navigator.tsx","qualifiedName":"NavigatorProps"},"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"NavigatorProps","package":"expo-router"},{"type":"literal","value":"children"}],"name":"Omit","package":"typescript"}}],"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.JSX.Element"},"name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element"}}]}}},{"name":"useContext","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"contextKey","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"descriptors","variant":"declaration","kind":1024,"type":{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"Descriptor"},"typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"intersection","types":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Omit"},"typeArguments":[{"type":"intersection","types":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"PrivateValueStore"},"typeArguments":[{"type":"tuple","elements":[{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/routers/src/types.tsx","qualifiedName":"ParamListBase"},"name":"ParamListBase","package":"@react-navigation/routers"},{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"unknown"}]}],"name":"PrivateValueStore","package":"@react-navigation/core"}]},{"type":"literal","value":"getParent"}],"name":"Omit","package":"typescript"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"EventConsumer"},"typeArguments":[{"type":"intersection","types":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript"},{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"EventMapCore"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Readonly"},"typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}],"name":"Readonly","package":"typescript"}],"name":"EventMapCore","package":"@react-navigation/core"}]}],"name":"EventConsumer","package":"@react-navigation/core"},{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"PrivateValueStore"},"typeArguments":[{"type":"tuple","elements":[{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/routers/src/types.tsx","qualifiedName":"ParamListBase"},"name":"ParamListBase","package":"@react-navigation/routers"},{"type":"intrinsic","name":"string"},{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript"}]}],"name":"PrivateValueStore","package":"@react-navigation/core"},{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}],"name":"Record","package":"typescript"}]},{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"RouteProp"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/routers/src/types.tsx","qualifiedName":"ParamListBase"},"name":"ParamListBase","package":"@react-navigation/routers"},{"type":"intrinsic","name":"string"}],"name":"RouteProp","package":"@react-navigation/core"}],"name":"Descriptor","package":"@react-navigation/core"}],"name":"Record","package":"typescript"}},{"name":"navigation","variant":"declaration","kind":1024,"type":{"type":"intersection","types":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"PrivateValueStore"},"typeArguments":[{"type":"tuple","elements":[{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/routers/src/types.tsx","qualifiedName":"ParamListBase"},"name":"ParamListBase","package":"@react-navigation/routers"},{"type":"intrinsic","name":"unknown"},{"type":"intrinsic","name":"unknown"}]}],"name":"PrivateValueStore","package":"@react-navigation/core"},{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"EventEmitter"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript"}],"name":"EventEmitter","package":"@react-navigation/core"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}],"name":"Record","package":"typescript"}]}},{"name":"router","variant":"declaration","kind":1024,"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/routers/src/types.tsx","qualifiedName":"RouterFactory"},"typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"RouterFactory","package":"@react-navigation/routers"}},{"name":"state","variant":"declaration","kind":1024,"type":{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Readonly"},"typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}],"name":"Readonly","package":"typescript"}}]}}}]}}}],"signatures":[{"name":"Navigator","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"An unstyled custom navigator. Good for basic web layouts"}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/routers/src/types.tsx","qualifiedName":"RouterFactory"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Readonly"},"typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}],"name":"Readonly","package":"typescript"},{"type":"intrinsic","name":"any"},{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/routers/src/types.tsx","qualifiedName":"DefaultRouterOptions"},"name":"DefaultRouterOptions","package":"@react-navigation/routers"}],"name":"RouterFactory","package":"@react-navigation/routers"}}],"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","target":{"sourceFileName":"src/views/Navigator.tsx","qualifiedName":"NavigatorProps"},"typeArguments":[{"type":"reference","target":117,"name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"NavigatorProps","package":"expo-router"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.JSX.Element"},"name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element"}]}}]},{"name":"Redirect","variant":"declaration","kind":64,"signatures":[{"name":"Redirect","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Redirects to the href as soon as the component is mounted."}]},"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"href","variant":"declaration","kind":1024,"type":{"type":"reference","target":215,"name":"Href","package":"expo-router"}}]}}}],"type":{"type":"literal","value":null}}]},{"name":"Unmatched","variant":"declaration","kind":64,"signatures":[{"name":"Unmatched","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Default screen for unmatched routes."}]},"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.JSX.Element"},"name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element"}}]},{"name":"useFocusEffect","variant":"declaration","kind":64,"signatures":[{"name":"useFocusEffect","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hook to run an effect whenever a route is \"focused\" Similar to "},{"kind":"code","text":"`React.useEffect`"},{"kind":"text","text":".\nThis can be used to perform side-effects such as fetching data or subscribing to events.\nThe passed callback should be wrapped in "},{"kind":"code","text":"`React.useCallback`"},{"kind":"text","text":" to avoid running the effect too often."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useFocusEffect } from 'expo-router';\nimport { useCallback } from 'react';\n\nexport default function Route() {\n useFocusEffect(\n   // Callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n   useCallback(() => {\n     // Invoked whenever the route is focused.\n     console.log('Hello')\n     }, []);\n   );\n return </>;\n}\n```"}]}]},"parameters":[{"name":"effect","variant":"param","kind":32768,"type":{"type":"reference","target":{"sourceFileName":"src/useFocusEffect.ts","qualifiedName":"EffectCallback"},"name":"EffectCallback","package":"expo-router"}},{"name":"do_not_pass_a_second_prop","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"undefined"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"useGlobalSearchParams","variant":"declaration","kind":64,"signatures":[{"name":"useGlobalSearchParams","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the globally selected query parameters, including dynamic path segments. This function will update even when the route is not focused.\nUseful for analytics or other background operations that don't draw to the screen.\n\nWhen querying search params in a stack, opt-towards using ["},{"kind":"code","text":"`useLocalSearchParams`"},{"kind":"text","text":"](#uselocalsearchparams) as these will only\nupdate when the route is focused.\n\nRoute URL example: "},{"kind":"code","text":"`acme://profile/baconbrix?extra=info`"},{"kind":"text","text":".\n\n> **Note:** See [local versus global search parameters](/router/reference/search-parameters/#local-versus-global-search-parameters) for usage\n> information."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useGlobalSearchParams } from 'expo-router';\n\nexport default function Route() {\n\n // user=baconbrix & extra=info\n const { user, extra } = useGlobalSearchParams();\n return <Text>User: {user}</Text>;\n}\n```"}]}]},"typeParameter":[{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","target":{"sourceFileName":"src/hooks.ts","qualifiedName":"SearchParams"},"name":"SearchParams","package":"expo-router"},"default":{"type":"reference","target":221,"name":"UnknownOutputParams","package":"expo-router"}}],"type":{"type":"reference","target":230,"typeArguments":[{"type":"reference","target":11,"name":"TParams","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router"}},{"name":"useGlobalSearchParams","variant":"signature","kind":4096,"typeParameter":[{"name":"TRoute","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"}},{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","target":{"sourceFileName":"src/hooks.ts","qualifiedName":"SearchParams"},"name":"SearchParams","package":"expo-router"},"default":{"type":"reference","target":221,"name":"UnknownOutputParams","package":"expo-router"}}],"type":{"type":"reference","target":230,"typeArguments":[{"type":"reference","target":13,"name":"TRoute","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":14,"name":"TParams","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router"}}]},{"name":"useLocalSearchParams","variant":"declaration","kind":64,"signatures":[{"name":"useLocalSearchParams","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the URL parameters for the contextually focused route. e.g. "},{"kind":"code","text":"`/acme?foo=bar`"},{"kind":"text","text":" -> "},{"kind":"code","text":"`{ foo: \"bar\" }`"},{"kind":"text","text":".\nThis is useful for stacks where you may push a new screen that changes the query parameters.\nFor dynamic routes, both the route parameters and the search parameters are returned.\n\nTo observe updates even when the invoking route is not focused, use "},{"kind":"code","text":"`useGlobalSearchParams()`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@see","content":[{"kind":"code","text":"`useGlobalSearchParams`"}]}]},"typeParameter":[{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","target":{"sourceFileName":"src/hooks.ts","qualifiedName":"SearchParams"},"name":"SearchParams","package":"expo-router"},"default":{"type":"reference","target":221,"name":"UnknownOutputParams","package":"expo-router"}}],"type":{"type":"reference","target":230,"typeArguments":[{"type":"reference","target":17,"name":"TParams","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router"}},{"name":"useLocalSearchParams","variant":"signature","kind":4096,"typeParameter":[{"name":"TRoute","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"}},{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","target":{"sourceFileName":"src/hooks.ts","qualifiedName":"SearchParams"},"name":"SearchParams","package":"expo-router"},"default":{"type":"reference","target":221,"name":"UnknownOutputParams","package":"expo-router"}}],"type":{"type":"reference","target":230,"typeArguments":[{"type":"reference","target":19,"name":"TRoute","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":20,"name":"TParams","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router"}}]},{"name":"useNavigation","variant":"declaration","kind":64,"signatures":[{"name":"useNavigation","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Access the underlying React Navigation ["},{"kind":"code","text":"`navigation`"},{"kind":"text","text":" prop](https://reactnavigation.org/docs/navigation-prop) to imperatively access layout-specific functionality like "},{"kind":"code","text":"`navigation.openDrawer()`"},{"kind":"text","text":" in a Drawer layout."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useNavigation } from 'expo-router';\n\nexport default function Route() {\n // Access the current navigation object for the current route.\n const navigation = useNavigation();\n\n return (\n  <View>\n   <Text onPress={() => {\n     // Open the drawer view.\n     navigation.openDrawer();\n   }}>\n    Open Drawer\n   </Text>\n  </View>\n );\n}\n```"},{"kind":"text","text":"\n\nWhen using nested layouts, you can access higher-order layouts by passing a secondary argument denoting the layout route. For example, "},{"kind":"code","text":"`/menu/_layout.tsx`"},{"kind":"text","text":" is nested inside "},{"kind":"code","text":"`/app/orders/`"},{"kind":"text","text":", you can use "},{"kind":"code","text":"`useNavigation('/orders/menu/')`"},{"kind":"text","text":"."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx app/orders/menu/index.tsx\nimport { useNavigation } from 'expo-router';\n\nexport default function MenuRoute() {\n\n const rootLayout = useNavigation('/');\n const ordersLayout = useNavigation('/orders');\n\n // Same as the default results of `useNavigation()` when invoked in this route.\n const parentLayout = useNavigation('/orders/menu');\n\n}\n```"},{"kind":"text","text":"\n\nIf you attempt to access a layout that doesn't exist, an error such as "},{"kind":"code","text":"`Could not find parent navigation with route \"/non-existent\"`"},{"kind":"text","text":" is thrown.\n\nSee React Navigation documentation on [navigation dependent functions](https://reactnavigation.org/docs/navigation-prop/#navigator-dependent-functions) for more information."}]},{"tag":"@returns","content":[{"kind":"text","text":"The navigation object for the current route."}]}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072,"default":{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"NavigationProp"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"__global.ReactNavigation.RootParamList"},"name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList"}],"name":"NavigationProp","package":"@react-navigation/core"}}],"parameters":[{"name":"parent","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Provide an absolute path such as "},{"kind":"code","text":"`/(root)`"},{"kind":"text","text":" to the parent route or a relative path like "},{"kind":"code","text":"`../../`"},{"kind":"text","text":" to the parent route."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","target":171,"name":"T","package":"expo-router","refersToTypeParameter":true}}]},{"name":"useNavigationContainerRef","variant":"declaration","kind":64,"signatures":[{"name":"useNavigationContainerRef","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The root "},{"kind":"code","text":"`<NavigationContainer />`"},{"kind":"text","text":" ref for the app. The "},{"kind":"code","text":"`ref.current`"},{"kind":"text","text":" may be "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if the "},{"kind":"code","text":"`<NavigationContainer />`"},{"kind":"text","text":" hasn't mounted yet."}]}]},"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"NavigationContainerRefWithCurrent"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"__global.ReactNavigation.RootParamList"},"name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList"}],"name":"NavigationContainerRefWithCurrent","package":"@react-navigation/core"}}]},{"name":"usePathname","variant":"declaration","kind":64,"signatures":[{"name":"usePathname","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Global selected route location without search parameters. For example, "},{"kind":"code","text":"`/acme?foo=bar`"},{"kind":"text","text":" -> "},{"kind":"code","text":"`/acme`"},{"kind":"text","text":". Segments will be normalized: "},{"kind":"code","text":"`/[id]?id=normal`"},{"kind":"text","text":" -> "},{"kind":"code","text":"`/normal`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useSegments } from 'expo-router';\n\nexport default function Route() {\n  // segments = [\"profile\", \"[user]\"]</b>\n  const segments = useSegments();\n\n  return <Text>Hello</Text>;\n\n}\n```"}]}]},"type":{"type":"intrinsic","name":"string"}}]},{"name":"useRootNavigation","variant":"declaration","kind":64,"signatures":[{"name":"useRootNavigation","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Use ["},{"kind":"code","text":"`useNavigationContainerRef`"},{"kind":"text","text":"](#usenavigationcontainerref) instead, which returns a React "},{"kind":"code","text":"`ref`"},{"kind":"text","text":"."}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"NavigationContainerRef"},"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"__global.ReactNavigation.RootParamList"},"name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList"}],"name":"NavigationContainerRef","package":"@react-navigation/core"}]}}]},{"name":"useRootNavigationState","variant":"declaration","kind":64,"signatures":[{"name":"useRootNavigationState","variant":"signature","kind":4096,"type":{"type":"reference","target":{"sourceFileName":"src/fork/getStateFromPath.ts","qualifiedName":"ResultState"},"name":"ResultState","package":"expo-router"}}]},{"name":"useRouter","variant":"declaration","kind":64,"signatures":[{"name":"useRouter","variant":"signature","kind":4096,"type":{"type":"reference","target":29,"name":"Router","package":"expo-router"}}]},{"name":"useSegments","variant":"declaration","kind":64,"signatures":[{"name":"useSegments","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get a list of selected file segments for the currently selected route. Segments are not normalized, so they will be the same as the file path. For example: "},{"kind":"code","text":"`/[id]?id=normal -> [\"[id]\"]`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useSegments } from 'expo-router';\n\nexport default function Route() {\n  // segments = [\"profile\", \"[user]\"]\n  const segments = useSegments();\n\n  return <Text>Hello</Text>;\n}\n```"},{"kind":"text","text":"\n\n\n"},{"kind":"code","text":"`useSegments`"},{"kind":"text","text":" can be typed using an abstract. Consider the following file structure, and strictly typed "},{"kind":"code","text":"`useSegments`"},{"kind":"text","text":" function:\n\n"},{"kind":"code","text":"```md\n- app\n  - [user]\n    - index.js\n    - followers.js\n  - settings.js\n```"},{"kind":"text","text":"\n\n\nThis can be strictly typed using the following abstract:\n\n"},{"kind":"code","text":"```ts\nconst [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()\n```"}]}]},"typeParameter":[{"name":"TSegments","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"default":{"type":"intrinsic","name":"string"}}],"type":{"type":"conditional","checkType":{"type":"reference","target":23,"name":"TSegments","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"intrinsic","name":"string"},"trueType":{"type":"reference","target":235,"typeArguments":[{"type":"reference","target":23,"name":"TSegments","package":"expo-router","refersToTypeParameter":true}],"name":"RouteSegments","package":"expo-router"},"falseType":{"type":"reference","target":23,"name":"TSegments","package":"expo-router","refersToTypeParameter":true}}}]},{"name":"withLayoutContext","variant":"declaration","kind":64,"signatures":[{"name":"withLayoutContext","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Return a navigator that automatically injects matched routes and renders nothing when there are no children. Return type with children prop optional"}]},"typeParameter":[{"name":"TOptions","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"object"}},{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.ComponentType"},"typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ComponentType","package":"@types/react","qualifiedName":"React.ComponentType"}},{"name":"State","variant":"typeParam","kind":131072,"type":{"type":"reference","target":{"sourceFileName":"../../tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Readonly"},"typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}],"name":"Readonly","package":"typescript"}},{"name":"EventMap","variant":"typeParam","kind":131072,"type":{"type":"reference","target":{"sourceFileName":"../../node_modules/@react-navigation/core/src/types.tsx","qualifiedName":"EventMapBase"},"name":"EventMapBase","package":"@react-navigation/core"}}],"parameters":[{"name":"Nav","variant":"param","kind":32768,"type":{"type":"reference","target":101,"name":"T","package":"expo-router","refersToTypeParameter":true}},{"name":"processor","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"options","variant":"param","kind":32768,"type":{"type":"array","elementType":{"type":"reference","target":{"sourceFileName":"src/useScreens.tsx","qualifiedName":"ScreenProps"},"typeArguments":[{"type":"reference","target":100,"name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":102,"name":"State","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":104,"name":"EventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}}],"type":{"type":"array","elementType":{"type":"reference","target":{"sourceFileName":"src/useScreens.tsx","qualifiedName":"ScreenProps"},"typeArguments":[{"type":"reference","target":100,"name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":102,"name":"State","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":104,"name":"EventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}}]}}}],"type":{"type":"intersection","types":[{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.ForwardRefExoticComponent"},"typeArguments":[{"type":"intersection","types":[{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.PropsWithoutRef"},"typeArguments":[{"type":"reference","target":189,"typeArguments":[{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.ComponentProps"},"typeArguments":[{"type":"reference","target":101,"name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"ComponentProps","package":"@types/react","qualifiedName":"React.ComponentProps"},{"type":"literal","value":"children"}],"name":"PickPartial","package":"expo-router"}],"name":"PropsWithoutRef","package":"@types/react","qualifiedName":"React.PropsWithoutRef"},{"type":"reference","target":{"sourceFileName":"../../node_modules/@types/react/index.d.ts","qualifiedName":"React.RefAttributes"},"typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"RefAttributes","package":"@types/react","qualifiedName":"React.RefAttributes"}]}],"name":"ForwardRefExoticComponent","package":"@types/react","qualifiedName":"React.ForwardRefExoticComponent"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"Screen","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","target":{"sourceFileName":"src/useScreens.tsx","qualifiedName":"ScreenProps"},"typeArguments":[{"type":"reference","target":100,"name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":102,"name":"State","package":"expo-router","refersToTypeParameter":true},{"type":"reference","target":104,"name":"EventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}],"type":{"type":"literal","value":null}}]}}}]}}]}}]}],"packageName":"expo-router"}